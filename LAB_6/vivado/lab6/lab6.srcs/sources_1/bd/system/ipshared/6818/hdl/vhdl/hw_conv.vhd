-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hw_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sin_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    sin_TVALID : IN STD_LOGIC;
    sin_TREADY : OUT STD_LOGIC;
    sin_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sout_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    sout_TVALID : OUT STD_LOGIC;
    sout_TREADY : IN STD_LOGIC;
    sout_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hw_conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hw_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.471000,HLS_SYN_LAT=6829085,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1431,HLS_SYN_LUT=1555,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_40201 : STD_LOGIC_VECTOR (18 downto 0) := "1000000001000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_1FD : STD_LOGIC_VECTOR (9 downto 0) := "0111111101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_200 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_const_lv19_40200 : STD_LOGIC_VECTOR (18 downto 0) := "1000000001000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal sin_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_vld_in : STD_LOGIC;
    signal sin_V_data_V_0_vld_out : STD_LOGIC;
    signal sin_V_data_V_0_ack_in : STD_LOGIC;
    signal sin_V_data_V_0_ack_out : STD_LOGIC;
    signal sin_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal sin_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal sin_V_data_V_0_sel : STD_LOGIC;
    signal sin_V_data_V_0_load_A : STD_LOGIC;
    signal sin_V_data_V_0_load_B : STD_LOGIC;
    signal sin_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sin_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal sin_V_dest_V_0_vld_in : STD_LOGIC;
    signal sin_V_dest_V_0_ack_out : STD_LOGIC;
    signal sin_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_vld_in : STD_LOGIC;
    signal sout_V_data_V_1_vld_out : STD_LOGIC;
    signal sout_V_data_V_1_ack_in : STD_LOGIC;
    signal sout_V_data_V_1_ack_out : STD_LOGIC;
    signal sout_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal sout_V_data_V_1_sel : STD_LOGIC;
    signal sout_V_data_V_1_load_A : STD_LOGIC;
    signal sout_V_data_V_1_load_B : STD_LOGIC;
    signal sout_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal sout_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_keep_V_1_vld_in : STD_LOGIC;
    signal sout_V_keep_V_1_vld_out : STD_LOGIC;
    signal sout_V_keep_V_1_ack_in : STD_LOGIC;
    signal sout_V_keep_V_1_ack_out : STD_LOGIC;
    signal sout_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_keep_V_1_sel : STD_LOGIC;
    signal sout_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_strb_V_1_vld_in : STD_LOGIC;
    signal sout_V_strb_V_1_vld_out : STD_LOGIC;
    signal sout_V_strb_V_1_ack_in : STD_LOGIC;
    signal sout_V_strb_V_1_ack_out : STD_LOGIC;
    signal sout_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_strb_V_1_sel : STD_LOGIC;
    signal sout_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_user_V_1_vld_in : STD_LOGIC;
    signal sout_V_user_V_1_vld_out : STD_LOGIC;
    signal sout_V_user_V_1_ack_in : STD_LOGIC;
    signal sout_V_user_V_1_ack_out : STD_LOGIC;
    signal sout_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_user_V_1_sel : STD_LOGIC;
    signal sout_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_vld_in : STD_LOGIC;
    signal sout_V_last_V_1_vld_out : STD_LOGIC;
    signal sout_V_last_V_1_ack_in : STD_LOGIC;
    signal sout_V_last_V_1_ack_out : STD_LOGIC;
    signal sout_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal sout_V_last_V_1_sel : STD_LOGIC;
    signal sout_V_last_V_1_load_A : STD_LOGIC;
    signal sout_V_last_V_1_load_B : STD_LOGIC;
    signal sout_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal sout_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_id_V_1_vld_in : STD_LOGIC;
    signal sout_V_id_V_1_vld_out : STD_LOGIC;
    signal sout_V_id_V_1_ack_in : STD_LOGIC;
    signal sout_V_id_V_1_ack_out : STD_LOGIC;
    signal sout_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_id_V_1_sel : STD_LOGIC;
    signal sout_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_dest_V_1_vld_in : STD_LOGIC;
    signal sout_V_dest_V_1_vld_out : STD_LOGIC;
    signal sout_V_dest_V_1_ack_in : STD_LOGIC;
    signal sout_V_dest_V_1_ack_out : STD_LOGIC;
    signal sout_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_dest_V_1_sel : STD_LOGIC;
    signal sout_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sin_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal exitcond1_reg_704 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_7_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal tmp_3_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal start_pos_reg_236 : STD_LOGIC_VECTOR (9 downto 0);
    signal end_pos_reg_248 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_260 : STD_LOGIC_VECTOR (18 downto 0);
    signal kbuf_2_2_1_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_0_0_load_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal kbuf_1_0_load_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_0_load_5_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_0_load_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_0_load_6_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_704_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_313_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_1_reg_708 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_7_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal result_1_3_fu_437_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_1_3_reg_741 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_predicate_op137_read_state15 : BOOLEAN;
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal lbuf_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_2_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal tmp7_fu_489_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_reg_772 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_predicate_op180_write_state17 : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_475_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_state27_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal lbuf_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lbuf_0_ce0 : STD_LOGIC;
    signal lbuf_0_we0 : STD_LOGIC;
    signal lbuf_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lbuf_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lbuf_1_ce0 : STD_LOGIC;
    signal lbuf_1_we0 : STD_LOGIC;
    signal ap_phi_mux_start_pos_phi_fu_240_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_end_pos_phi_fu_252_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_264_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_phi_reg_pp0_iter0_kbuf_2_2_1_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_6_1_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal kbuf_2_1_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_0_0_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_0_1_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_0_s_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_0_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_1_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_0_s_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_0_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage15_01001 : BOOLEAN;
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_387_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_cast_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_1_cast_fu_406_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_3_cast_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_2_cast_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_423_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_cast_fu_433_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_454_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_475_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_8_cast_fu_485_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_5_cast_fu_481_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_502_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_1_3_cast_fu_499_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_510_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_1_4_fu_514_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_6_cast_fu_524_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_7_cast_fu_527_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_cast_fu_537_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_540_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_531_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_cast_fu_546_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_1_8_fu_550_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_556_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_602_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_350_ce : STD_LOGIC;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal grp_fu_387_ce : STD_LOGIC;
    signal grp_fu_454_ce : STD_LOGIC;
    signal ap_block_state18_pp0_stage16_iter0 : BOOLEAN;
    signal ap_predicate_op183_write_state18 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_state19_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state20_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state21_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_state22_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_state23_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_state24_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state25_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_state26_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal grp_fu_475_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_989 : BOOLEAN;
    signal ap_condition_1783 : BOOLEAN;

    component hw_conv_srem_10nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component hw_conv_lbuf_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lbuf_0_U : component hw_conv_lbuf_0
    generic map (
        DataWidth => 8,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lbuf_0_address0,
        ce0 => lbuf_0_ce0,
        we0 => lbuf_0_we0,
        d0 => kbuf_1_0_load_reg_683,
        q0 => lbuf_0_q0);

    lbuf_1_U : component hw_conv_lbuf_0
    generic map (
        DataWidth => 8,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lbuf_1_address0,
        ce0 => lbuf_1_ce0,
        we0 => lbuf_1_we0,
        d0 => kbuf_2_0_load_reg_693,
        q0 => lbuf_1_q0);

    hw_conv_srem_10nsbkb_U1 : component hw_conv_srem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_350_p0,
        din1 => ap_const_lv10_1FD,
        ce => grp_fu_350_ce,
        dout => grp_fu_350_p2);

    hw_conv_srem_10nsbkb_U2 : component hw_conv_srem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_387_p0,
        din1 => ap_const_lv10_1FD,
        ce => grp_fu_387_ce,
        dout => grp_fu_387_p2);

    hw_conv_srem_10nsbkb_U3 : component hw_conv_srem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_454_p0,
        din1 => ap_const_lv10_1FD,
        ce => grp_fu_454_ce,
        dout => grp_fu_454_p2);

    hw_conv_srem_10nsbkb_U4 : component hw_conv_srem_10nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_475_p0,
        din1 => ap_const_lv10_1FD,
        ce => grp_fu_475_ce,
        dout => grp_fu_475_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((sin_V_data_V_0_ack_out = ap_const_logic_1) and (sin_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        sin_V_data_V_0_sel_rd <= not(sin_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((sin_V_data_V_0_ack_in = ap_const_logic_1) and (sin_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        sin_V_data_V_0_sel_wr <= not(sin_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((sin_V_data_V_0_state = ap_const_lv2_2) and (sin_V_data_V_0_vld_in = ap_const_logic_0)) or ((sin_V_data_V_0_state = ap_const_lv2_3) and (sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((sin_V_data_V_0_state = ap_const_lv2_1) and (sin_V_data_V_0_ack_out = ap_const_logic_0)) or ((sin_V_data_V_0_state = ap_const_lv2_3) and (sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_ack_out = ap_const_logic_1))) and not(((sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_vld_in = ap_const_logic_1))) and (sin_V_data_V_0_state = ap_const_lv2_3)) or ((sin_V_data_V_0_state = ap_const_lv2_1) and (sin_V_data_V_0_ack_out = ap_const_logic_1)) or ((sin_V_data_V_0_state = ap_const_lv2_2) and (sin_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    sin_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sin_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((sin_V_dest_V_0_state = ap_const_lv2_2) and (sin_V_dest_V_0_vld_in = ap_const_logic_0)) or ((sin_V_dest_V_0_state = ap_const_lv2_3) and (sin_V_dest_V_0_vld_in = ap_const_logic_0) and (sin_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((sin_V_dest_V_0_state = ap_const_lv2_1) and (sin_V_dest_V_0_ack_out = ap_const_logic_0)) or ((sin_V_dest_V_0_state = ap_const_lv2_3) and (sin_V_dest_V_0_ack_out = ap_const_logic_0) and (sin_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sin_V_dest_V_0_vld_in = ap_const_logic_0) and (sin_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((sin_V_dest_V_0_ack_out = ap_const_logic_0) and (sin_V_dest_V_0_vld_in = ap_const_logic_1))) and (sin_V_dest_V_0_state = ap_const_lv2_3)) or ((sin_V_dest_V_0_state = ap_const_lv2_1) and (sin_V_dest_V_0_ack_out = ap_const_logic_1)) or ((sin_V_dest_V_0_state = ap_const_lv2_2) and (sin_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    sin_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_data_V_1_ack_out = ap_const_logic_1) and (sout_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_data_V_1_sel_rd <= not(sout_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (sout_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        sout_V_data_V_1_sel_wr <= not(sout_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_data_V_1_state = ap_const_lv2_2) and (sout_V_data_V_1_vld_in = ap_const_logic_0)) or ((sout_V_data_V_1_state = ap_const_lv2_3) and (sout_V_data_V_1_vld_in = ap_const_logic_0) and (sout_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_data_V_1_state = ap_const_lv2_1) and (sout_V_data_V_1_ack_out = ap_const_logic_0)) or ((sout_V_data_V_1_state = ap_const_lv2_3) and (sout_V_data_V_1_ack_out = ap_const_logic_0) and (sout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_data_V_1_vld_in = ap_const_logic_0) and (sout_V_data_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_data_V_1_ack_out = ap_const_logic_0) and (sout_V_data_V_1_vld_in = ap_const_logic_1))) and (sout_V_data_V_1_state = ap_const_lv2_3)) or ((sout_V_data_V_1_state = ap_const_lv2_1) and (sout_V_data_V_1_ack_out = ap_const_logic_1)) or ((sout_V_data_V_1_state = ap_const_lv2_2) and (sout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_dest_V_1_ack_out = ap_const_logic_1) and (sout_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_dest_V_1_sel_rd <= not(sout_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_dest_V_1_state = ap_const_lv2_2) and (sout_V_dest_V_1_vld_in = ap_const_logic_0)) or ((sout_V_dest_V_1_state = ap_const_lv2_3) and (sout_V_dest_V_1_vld_in = ap_const_logic_0) and (sout_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_dest_V_1_state = ap_const_lv2_1) and (sout_V_dest_V_1_ack_out = ap_const_logic_0)) or ((sout_V_dest_V_1_state = ap_const_lv2_3) and (sout_V_dest_V_1_ack_out = ap_const_logic_0) and (sout_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_dest_V_1_vld_in = ap_const_logic_0) and (sout_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_dest_V_1_ack_out = ap_const_logic_0) and (sout_V_dest_V_1_vld_in = ap_const_logic_1))) and (sout_V_dest_V_1_state = ap_const_lv2_3)) or ((sout_V_dest_V_1_state = ap_const_lv2_1) and (sout_V_dest_V_1_ack_out = ap_const_logic_1)) or ((sout_V_dest_V_1_state = ap_const_lv2_2) and (sout_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_id_V_1_ack_out = ap_const_logic_1) and (sout_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_id_V_1_sel_rd <= not(sout_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_id_V_1_state = ap_const_lv2_2) and (sout_V_id_V_1_vld_in = ap_const_logic_0)) or ((sout_V_id_V_1_state = ap_const_lv2_3) and (sout_V_id_V_1_vld_in = ap_const_logic_0) and (sout_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_id_V_1_state = ap_const_lv2_1) and (sout_V_id_V_1_ack_out = ap_const_logic_0)) or ((sout_V_id_V_1_state = ap_const_lv2_3) and (sout_V_id_V_1_ack_out = ap_const_logic_0) and (sout_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_id_V_1_vld_in = ap_const_logic_0) and (sout_V_id_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_id_V_1_ack_out = ap_const_logic_0) and (sout_V_id_V_1_vld_in = ap_const_logic_1))) and (sout_V_id_V_1_state = ap_const_lv2_3)) or ((sout_V_id_V_1_state = ap_const_lv2_1) and (sout_V_id_V_1_ack_out = ap_const_logic_1)) or ((sout_V_id_V_1_state = ap_const_lv2_2) and (sout_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_keep_V_1_ack_out = ap_const_logic_1) and (sout_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_keep_V_1_sel_rd <= not(sout_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_keep_V_1_state = ap_const_lv2_2) and (sout_V_keep_V_1_vld_in = ap_const_logic_0)) or ((sout_V_keep_V_1_state = ap_const_lv2_3) and (sout_V_keep_V_1_vld_in = ap_const_logic_0) and (sout_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_keep_V_1_state = ap_const_lv2_1) and (sout_V_keep_V_1_ack_out = ap_const_logic_0)) or ((sout_V_keep_V_1_state = ap_const_lv2_3) and (sout_V_keep_V_1_ack_out = ap_const_logic_0) and (sout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_keep_V_1_vld_in = ap_const_logic_0) and (sout_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_keep_V_1_ack_out = ap_const_logic_0) and (sout_V_keep_V_1_vld_in = ap_const_logic_1))) and (sout_V_keep_V_1_state = ap_const_lv2_3)) or ((sout_V_keep_V_1_state = ap_const_lv2_1) and (sout_V_keep_V_1_ack_out = ap_const_logic_1)) or ((sout_V_keep_V_1_state = ap_const_lv2_2) and (sout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_last_V_1_ack_out = ap_const_logic_1) and (sout_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_last_V_1_sel_rd <= not(sout_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((sout_V_last_V_1_ack_in = ap_const_logic_1) and (sout_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        sout_V_last_V_1_sel_wr <= not(sout_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_last_V_1_state = ap_const_lv2_2) and (sout_V_last_V_1_vld_in = ap_const_logic_0)) or ((sout_V_last_V_1_state = ap_const_lv2_3) and (sout_V_last_V_1_vld_in = ap_const_logic_0) and (sout_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_last_V_1_state = ap_const_lv2_1) and (sout_V_last_V_1_ack_out = ap_const_logic_0)) or ((sout_V_last_V_1_state = ap_const_lv2_3) and (sout_V_last_V_1_ack_out = ap_const_logic_0) and (sout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_last_V_1_vld_in = ap_const_logic_0) and (sout_V_last_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_last_V_1_ack_out = ap_const_logic_0) and (sout_V_last_V_1_vld_in = ap_const_logic_1))) and (sout_V_last_V_1_state = ap_const_lv2_3)) or ((sout_V_last_V_1_state = ap_const_lv2_1) and (sout_V_last_V_1_ack_out = ap_const_logic_1)) or ((sout_V_last_V_1_state = ap_const_lv2_2) and (sout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_strb_V_1_ack_out = ap_const_logic_1) and (sout_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_strb_V_1_sel_rd <= not(sout_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_strb_V_1_state = ap_const_lv2_2) and (sout_V_strb_V_1_vld_in = ap_const_logic_0)) or ((sout_V_strb_V_1_state = ap_const_lv2_3) and (sout_V_strb_V_1_vld_in = ap_const_logic_0) and (sout_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_strb_V_1_state = ap_const_lv2_1) and (sout_V_strb_V_1_ack_out = ap_const_logic_0)) or ((sout_V_strb_V_1_state = ap_const_lv2_3) and (sout_V_strb_V_1_ack_out = ap_const_logic_0) and (sout_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_strb_V_1_vld_in = ap_const_logic_0) and (sout_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_strb_V_1_ack_out = ap_const_logic_0) and (sout_V_strb_V_1_vld_in = ap_const_logic_1))) and (sout_V_strb_V_1_state = ap_const_lv2_3)) or ((sout_V_strb_V_1_state = ap_const_lv2_1) and (sout_V_strb_V_1_ack_out = ap_const_logic_1)) or ((sout_V_strb_V_1_state = ap_const_lv2_2) and (sout_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_user_V_1_ack_out = ap_const_logic_1) and (sout_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_user_V_1_sel_rd <= not(sout_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_user_V_1_state = ap_const_lv2_2) and (sout_V_user_V_1_vld_in = ap_const_logic_0)) or ((sout_V_user_V_1_state = ap_const_lv2_3) and (sout_V_user_V_1_vld_in = ap_const_logic_0) and (sout_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_user_V_1_state = ap_const_lv2_1) and (sout_V_user_V_1_ack_out = ap_const_logic_0)) or ((sout_V_user_V_1_state = ap_const_lv2_3) and (sout_V_user_V_1_ack_out = ap_const_logic_0) and (sout_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_user_V_1_vld_in = ap_const_logic_0) and (sout_V_user_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_user_V_1_ack_out = ap_const_logic_0) and (sout_V_user_V_1_vld_in = ap_const_logic_1))) and (sout_V_user_V_1_state = ap_const_lv2_3)) or ((sout_V_user_V_1_state = ap_const_lv2_1) and (sout_V_user_V_1_ack_out = ap_const_logic_1)) or ((sout_V_user_V_1_state = ap_const_lv2_2) and (sout_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_kbuf_2_2_1_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1783)) then 
                    ap_phi_reg_pp0_iter0_kbuf_2_2_1_reg_271 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_condition_989)) then 
                    ap_phi_reg_pp0_iter0_kbuf_2_2_1_reg_271 <= sin_V_data_V_0_data_out;
                end if;
            end if; 
        end if;
    end process;

    end_pos_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_704_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                end_pos_reg_248 <= grp_fu_475_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                end_pos_reg_248 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_260 <= i_1_reg_708;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_260 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    start_pos_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                start_pos_reg_236 <= grp_fu_454_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                start_pos_reg_236 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_704 <= exitcond1_fu_307_p2;
                exitcond1_reg_704_pp0_iter1_reg <= exitcond1_reg_704;
                kbuf_0_0_load_reg_678 <= kbuf_0_0_fu_114;
                kbuf_1_0_load_5_reg_688 <= kbuf_1_0_fu_126;
                kbuf_1_0_load_reg_683 <= kbuf_1_0_s_fu_122;
                kbuf_2_0_load_6_reg_698 <= kbuf_2_0_fu_138;
                kbuf_2_0_load_reg_693 <= kbuf_2_0_s_fu_134;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_1_reg_708 <= i_1_fu_313_p2;
                kbuf_0_0_fu_114 <= kbuf_0_1_fu_118;
                kbuf_1_0_fu_126 <= kbuf_1_1_fu_130;
                kbuf_1_0_s_fu_122 <= kbuf_1_0_fu_126;
                kbuf_2_0_fu_138 <= kbuf_2_1_fu_110;
                kbuf_2_0_s_fu_134 <= kbuf_2_0_fu_138;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                kbuf_0_1_fu_118 <= lbuf_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then
                kbuf_1_1_fu_130 <= kbuf_1_2_reg_761;
                kbuf_2_1_fu_110 <= kbuf_2_2_1_reg_271;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                kbuf_1_2_reg_761 <= lbuf_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                kbuf_2_2_1_reg_271 <= ap_phi_reg_pp0_iter0_kbuf_2_2_1_reg_271;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                result_1_3_reg_741 <= result_1_3_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sin_V_data_V_0_load_A = ap_const_logic_1)) then
                sin_V_data_V_0_payload_A <= sin_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sin_V_data_V_0_load_B = ap_const_logic_1)) then
                sin_V_data_V_0_payload_B <= sin_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_data_V_1_load_A = ap_const_logic_1)) then
                sout_V_data_V_1_payload_A <= tmp_V_fu_616_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_data_V_1_load_B = ap_const_logic_1)) then
                sout_V_data_V_1_payload_B <= tmp_V_fu_616_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_last_V_1_load_A = ap_const_logic_1)) then
                sout_V_last_V_1_payload_A <= tmp_last_V_reg_726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_last_V_1_load_B = ap_const_logic_1)) then
                sout_V_last_V_1_payload_B <= tmp_last_V_reg_726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                tmp7_reg_772 <= tmp7_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_7_reg_718 <= ap_phi_mux_i_phi_fu_264_p4(18 downto 18);
                tmp_3_reg_722 <= tmp_3_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_fu_364_p2 = ap_const_lv1_1) and (exitcond1_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_726 <= tmp_last_V_fu_370_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (sout_V_data_V_1_ack_in, sout_V_data_V_1_state, sout_V_keep_V_1_ack_in, sout_V_keep_V_1_state, sout_V_strb_V_1_ack_in, sout_V_strb_V_1_state, sout_V_user_V_1_ack_in, sout_V_user_V_1_state, sout_V_last_V_1_ack_in, sout_V_last_V_1_state, sout_V_id_V_1_ack_in, sout_V_id_V_1_state, sout_V_dest_V_1_ack_in, sout_V_dest_V_1_state, ap_CS_fsm, ap_enable_reg_pp0_iter0, exitcond1_fu_307_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state30, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_307_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond1_fu_307_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_state30 => 
                if ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (sout_V_dest_V_1_state(0) = ap_const_logic_0) and (sout_V_id_V_1_state(0) = ap_const_logic_0) and (sout_V_last_V_1_state(0) = ap_const_logic_0) and (sout_V_user_V_1_state(0) = ap_const_logic_0) and (sout_V_strb_V_1_state(0) = ap_const_logic_0) and (sout_V_keep_V_1_state(0) = ap_const_logic_0) and (sout_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(sin_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_predicate_op137_read_state15)
    begin
                ap_block_pp0_stage13_11001 <= ((ap_predicate_op137_read_state15 = ap_const_boolean_1) and (sin_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(sin_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_predicate_op137_read_state15)
    begin
                ap_block_pp0_stage13_subdone <= ((ap_predicate_op137_read_state15 = ap_const_boolean_1) and (sin_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state17_io)
    begin
                ap_block_pp0_stage15_11001 <= ((ap_const_boolean_1 = ap_block_state17_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state17_io)
    begin
                ap_block_pp0_stage15_subdone <= ((ap_const_boolean_1 = ap_block_state17_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage16_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state18_io)
    begin
                ap_block_pp0_stage16_11001 <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage16_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state18_io)
    begin
                ap_block_pp0_stage16_subdone <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage13_iter0_assign_proc : process(sin_V_data_V_0_vld_out, ap_predicate_op137_read_state15)
    begin
                ap_block_state15_pp0_stage13_iter0 <= ((ap_predicate_op137_read_state15 = ap_const_boolean_1) and (sin_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_io_assign_proc : process(sout_V_data_V_1_ack_in, ap_predicate_op180_write_state17)
    begin
                ap_block_state17_io <= ((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(sout_V_data_V_1_ack_in, ap_predicate_op183_write_state18)
    begin
                ap_block_state18_io <= ((ap_predicate_op183_write_state18 = ap_const_boolean_1) and (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state18_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_assign_proc : process(sout_V_data_V_1_ack_in, sout_V_keep_V_1_ack_in, sout_V_strb_V_1_ack_in, sout_V_user_V_1_ack_in, sout_V_last_V_1_ack_in, sout_V_id_V_1_ack_in, sout_V_dest_V_1_ack_in)
    begin
                ap_block_state30 <= ((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1783_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, exitcond1_fu_307_p2, tmp_1_7_fu_356_p3)
    begin
                ap_condition_1783 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_7_fu_356_p3 = ap_const_lv1_1) and (exitcond1_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_989_assign_proc : process(ap_CS_fsm_pp0_stage13, exitcond1_reg_704, tmp_1_7_reg_718, ap_block_pp0_stage13_11001)
    begin
                ap_condition_989 <= ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (tmp_1_7_reg_718 = ap_const_lv1_0) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_307_p2)
    begin
        if ((exitcond1_fu_307_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_end_pos_phi_fu_252_p4_assign_proc : process(end_pos_reg_248, exitcond1_reg_704_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, grp_fu_475_p2, ap_block_pp0_stage1)
    begin
        if (((exitcond1_reg_704_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_end_pos_phi_fu_252_p4 <= grp_fu_475_p2;
        else 
            ap_phi_mux_end_pos_phi_fu_252_p4 <= end_pos_reg_248;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_264_p4_assign_proc : process(exitcond1_reg_704, i_reg_260, ap_CS_fsm_pp0_stage0, i_1_reg_708, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_264_p4 <= i_1_reg_708;
        else 
            ap_phi_mux_i_phi_fu_264_p4 <= i_reg_260;
        end if; 
    end process;


    ap_phi_mux_start_pos_phi_fu_240_p4_assign_proc : process(exitcond1_reg_704, start_pos_reg_236, ap_CS_fsm_pp0_stage0, grp_fu_454_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_start_pos_phi_fu_240_p4 <= grp_fu_454_p2;
        else 
            ap_phi_mux_start_pos_phi_fu_240_p4 <= start_pos_reg_236;
        end if; 
    end process;


    ap_predicate_op137_read_state15_assign_proc : process(exitcond1_reg_704, tmp_1_7_reg_718)
    begin
                ap_predicate_op137_read_state15 <= ((tmp_1_7_reg_718 = ap_const_lv1_0) and (exitcond1_reg_704 = ap_const_lv1_0));
    end process;


    ap_predicate_op180_write_state17_assign_proc : process(exitcond1_reg_704, tmp_3_reg_722)
    begin
                ap_predicate_op180_write_state17 <= ((tmp_3_reg_722 = ap_const_lv1_1) and (exitcond1_reg_704 = ap_const_lv1_0));
    end process;


    ap_predicate_op183_write_state18_assign_proc : process(exitcond1_reg_704, tmp_3_reg_722)
    begin
                ap_predicate_op183_write_state18 <= ((tmp_3_reg_722 = ap_const_lv1_1) and (exitcond1_reg_704 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_307_p2 <= "1" when (ap_phi_mux_i_phi_fu_264_p4 = ap_const_lv19_40201) else "0";

    grp_fu_350_ce_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            grp_fu_350_ce <= ap_const_logic_1;
        else 
            grp_fu_350_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_350_p0 <= std_logic_vector(signed(ap_phi_mux_start_pos_phi_fu_240_p4) + signed(ap_const_lv10_1));

    grp_fu_387_ce_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            grp_fu_387_ce <= ap_const_logic_1;
        else 
            grp_fu_387_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_387_p0 <= std_logic_vector(signed(ap_phi_mux_end_pos_phi_fu_252_p4) + signed(ap_const_lv10_1));

    grp_fu_454_ce_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage22_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage24_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage25_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)))) then 
            grp_fu_454_ce <= ap_const_logic_1;
        else 
            grp_fu_454_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_454_p0 <= std_logic_vector(signed(grp_fu_350_p2) + signed(ap_const_lv10_1));

    grp_fu_475_ce_assign_proc : process(ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage22_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage24_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage25_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)))) then 
            grp_fu_475_ce <= ap_const_logic_1;
        else 
            grp_fu_475_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_475_p0 <= std_logic_vector(signed(grp_fu_387_p2) + signed(ap_const_lv10_1));
    i_1_fu_313_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_264_p4) + unsigned(ap_const_lv19_1));
    icmp_fu_566_p2 <= "1" when (signed(tmp_5_fu_556_p4) > signed(ap_const_lv4_0)) else "0";

    lbuf_0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, tmp_6_fu_376_p1, tmp_s_fu_393_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                lbuf_0_address0 <= tmp_s_fu_393_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lbuf_0_address0 <= tmp_6_fu_376_p1(9 - 1 downto 0);
            else 
                lbuf_0_address0 <= "XXXXXXXXX";
            end if;
        else 
            lbuf_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lbuf_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            lbuf_0_ce0 <= ap_const_logic_1;
        else 
            lbuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_704, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lbuf_0_we0 <= ap_const_logic_1;
        else 
            lbuf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_enable_reg_pp0_iter0, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, tmp_6_1_fu_449_p1, tmp_1_fu_470_p1, ap_block_pp0_stage14)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                lbuf_1_address0 <= tmp_1_fu_470_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
                lbuf_1_address0 <= tmp_6_1_fu_449_p1(9 - 1 downto 0);
            else 
                lbuf_1_address0 <= "XXXXXXXXX";
            end if;
        else 
            lbuf_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lbuf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_enable_reg_pp0_iter0, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)))) then 
            lbuf_1_ce0 <= ap_const_logic_1;
        else 
            lbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_704, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lbuf_1_we0 <= ap_const_logic_1;
        else 
            lbuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_502_p3),12));
    p_shl_fu_502_p3 <= (kbuf_1_1_fu_130 & ap_const_lv3_0);
    phitmp_fu_602_p3 <= 
        ap_const_lv8_FF when (icmp_fu_566_p2(0) = '1') else 
        ap_const_lv8_0;
    result_1_3_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_1_3_reg_741),12));
    result_1_3_fu_437_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_423_p1) + unsigned(tmp2_cast_fu_433_p1));
    result_1_4_fu_514_p2 <= std_logic_vector(unsigned(result_1_3_cast_fu_499_p1) - unsigned(p_shl_cast_fu_510_p1));
    result_1_8_fu_550_p2 <= std_logic_vector(unsigned(tmp5_fu_531_p2) + unsigned(tmp6_cast_fu_546_p1));

    sin_TDATA_blk_n_assign_proc : process(sin_V_data_V_0_state, ap_CS_fsm_pp0_stage13, ap_enable_reg_pp0_iter0, ap_block_pp0_stage13, exitcond1_reg_704, tmp_1_7_reg_718)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage13) and (tmp_1_7_reg_718 = ap_const_lv1_0) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            sin_TDATA_blk_n <= sin_V_data_V_0_state(0);
        else 
            sin_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sin_TREADY <= sin_V_dest_V_0_state(1);
    sin_V_data_V_0_ack_in <= sin_V_data_V_0_state(1);

    sin_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_enable_reg_pp0_iter0, ap_predicate_op137_read_state15, ap_block_pp0_stage13_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_predicate_op137_read_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            sin_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            sin_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    sin_V_data_V_0_data_out_assign_proc : process(sin_V_data_V_0_payload_A, sin_V_data_V_0_payload_B, sin_V_data_V_0_sel)
    begin
        if ((sin_V_data_V_0_sel = ap_const_logic_1)) then 
            sin_V_data_V_0_data_out <= sin_V_data_V_0_payload_B;
        else 
            sin_V_data_V_0_data_out <= sin_V_data_V_0_payload_A;
        end if; 
    end process;

    sin_V_data_V_0_load_A <= (sin_V_data_V_0_state_cmp_full and not(sin_V_data_V_0_sel_wr));
    sin_V_data_V_0_load_B <= (sin_V_data_V_0_state_cmp_full and sin_V_data_V_0_sel_wr);
    sin_V_data_V_0_sel <= sin_V_data_V_0_sel_rd;
    sin_V_data_V_0_state_cmp_full <= '0' when (sin_V_data_V_0_state = ap_const_lv2_1) else '1';
    sin_V_data_V_0_vld_in <= sin_TVALID;
    sin_V_data_V_0_vld_out <= sin_V_data_V_0_state(0);

    sin_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_enable_reg_pp0_iter0, ap_predicate_op137_read_state15, ap_block_pp0_stage13_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_predicate_op137_read_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            sin_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            sin_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    sin_V_dest_V_0_vld_in <= sin_TVALID;
    sout_TDATA <= sout_V_data_V_1_data_out;

    sout_TDATA_blk_n_assign_proc : process(sout_V_data_V_1_state, ap_enable_reg_pp0_iter0, exitcond1_reg_704, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, tmp_3_reg_722, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage16) and (tmp_3_reg_722 = ap_const_lv1_1) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15) and (tmp_3_reg_722 = ap_const_lv1_1) and (exitcond1_reg_704 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sout_TDATA_blk_n <= sout_V_data_V_1_state(1);
        else 
            sout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sout_TDEST <= sout_V_dest_V_1_data_out;
    sout_TID <= sout_V_id_V_1_data_out;
    sout_TKEEP <= sout_V_keep_V_1_data_out;
    sout_TLAST <= sout_V_last_V_1_data_out;
    sout_TSTRB <= sout_V_strb_V_1_data_out;
    sout_TUSER <= sout_V_user_V_1_data_out;
    sout_TVALID <= sout_V_dest_V_1_state(0);
    sout_V_data_V_1_ack_in <= sout_V_data_V_1_state(1);
    sout_V_data_V_1_ack_out <= sout_TREADY;

    sout_V_data_V_1_data_out_assign_proc : process(sout_V_data_V_1_payload_A, sout_V_data_V_1_payload_B, sout_V_data_V_1_sel)
    begin
        if ((sout_V_data_V_1_sel = ap_const_logic_1)) then 
            sout_V_data_V_1_data_out <= sout_V_data_V_1_payload_B;
        else 
            sout_V_data_V_1_data_out <= sout_V_data_V_1_payload_A;
        end if; 
    end process;

    sout_V_data_V_1_load_A <= (sout_V_data_V_1_state_cmp_full and not(sout_V_data_V_1_sel_wr));
    sout_V_data_V_1_load_B <= (sout_V_data_V_1_state_cmp_full and sout_V_data_V_1_sel_wr);
    sout_V_data_V_1_sel <= sout_V_data_V_1_sel_rd;
    sout_V_data_V_1_state_cmp_full <= '0' when (sout_V_data_V_1_state = ap_const_lv2_1) else '1';

    sout_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_data_V_1_vld_out <= sout_V_data_V_1_state(0);
    sout_V_dest_V_1_ack_in <= sout_V_dest_V_1_state(1);
    sout_V_dest_V_1_ack_out <= sout_TREADY;
    sout_V_dest_V_1_data_out <= ap_const_lv1_0;
    sout_V_dest_V_1_sel <= sout_V_dest_V_1_sel_rd;

    sout_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_dest_V_1_vld_out <= sout_V_dest_V_1_state(0);
    sout_V_id_V_1_ack_in <= sout_V_id_V_1_state(1);
    sout_V_id_V_1_ack_out <= sout_TREADY;
    sout_V_id_V_1_data_out <= ap_const_lv1_0;
    sout_V_id_V_1_sel <= sout_V_id_V_1_sel_rd;

    sout_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_id_V_1_vld_out <= sout_V_id_V_1_state(0);
    sout_V_keep_V_1_ack_in <= sout_V_keep_V_1_state(1);
    sout_V_keep_V_1_ack_out <= sout_TREADY;
    sout_V_keep_V_1_data_out <= ap_const_lv1_1;
    sout_V_keep_V_1_sel <= sout_V_keep_V_1_sel_rd;

    sout_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_keep_V_1_vld_out <= sout_V_keep_V_1_state(0);
    sout_V_last_V_1_ack_in <= sout_V_last_V_1_state(1);
    sout_V_last_V_1_ack_out <= sout_TREADY;

    sout_V_last_V_1_data_out_assign_proc : process(sout_V_last_V_1_payload_A, sout_V_last_V_1_payload_B, sout_V_last_V_1_sel)
    begin
        if ((sout_V_last_V_1_sel = ap_const_logic_1)) then 
            sout_V_last_V_1_data_out <= sout_V_last_V_1_payload_B;
        else 
            sout_V_last_V_1_data_out <= sout_V_last_V_1_payload_A;
        end if; 
    end process;

    sout_V_last_V_1_load_A <= (sout_V_last_V_1_state_cmp_full and not(sout_V_last_V_1_sel_wr));
    sout_V_last_V_1_load_B <= (sout_V_last_V_1_state_cmp_full and sout_V_last_V_1_sel_wr);
    sout_V_last_V_1_sel <= sout_V_last_V_1_sel_rd;
    sout_V_last_V_1_state_cmp_full <= '0' when (sout_V_last_V_1_state = ap_const_lv2_1) else '1';

    sout_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_last_V_1_vld_out <= sout_V_last_V_1_state(0);
    sout_V_strb_V_1_ack_in <= sout_V_strb_V_1_state(1);
    sout_V_strb_V_1_ack_out <= sout_TREADY;
    sout_V_strb_V_1_data_out <= ap_const_lv1_0;
    sout_V_strb_V_1_sel <= sout_V_strb_V_1_sel_rd;

    sout_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_strb_V_1_vld_out <= sout_V_strb_V_1_state(0);
    sout_V_user_V_1_ack_in <= sout_V_user_V_1_state(1);
    sout_V_user_V_1_ack_out <= sout_TREADY;
    sout_V_user_V_1_data_out <= ap_const_lv1_0;
    sout_V_user_V_1_sel <= sout_V_user_V_1_sel_rd;

    sout_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_predicate_op180_write_state17, ap_block_pp0_stage15_11001)
    begin
        if (((ap_predicate_op180_write_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            sout_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_user_V_1_vld_out <= sout_V_user_V_1_state(0);
    tmp1_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_417_p2),10));
    tmp1_fu_417_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_403_p1) + unsigned(tmp_11_1_cast_fu_406_p1));
    tmp2_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_427_p2),10));
    tmp2_fu_427_p2 <= std_logic_vector(unsigned(tmp_11_3_cast_fu_414_p1) + unsigned(tmp_11_2_cast_fu_410_p1));
    tmp3_fu_585_p2 <= std_logic_vector(unsigned(kbuf_2_2_1_reg_271) + unsigned(kbuf_2_1_fu_110));
    tmp5_fu_531_p2 <= std_logic_vector(unsigned(tmp_11_6_cast_fu_524_p1) + unsigned(result_1_4_fu_514_p2));
    tmp6_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_540_p2),12));
    tmp6_fu_540_p2 <= std_logic_vector(unsigned(tmp_11_7_cast_fu_527_p1) + unsigned(tmp7_cast_fu_537_p1));
    tmp7_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_reg_772),10));
    tmp7_fu_489_p2 <= std_logic_vector(unsigned(tmp_11_8_cast_fu_485_p1) + unsigned(tmp_11_5_cast_fu_481_p1));
    tmp8_fu_580_p2 <= std_logic_vector(unsigned(tmp_2_fu_520_p1) + unsigned(kbuf_1_2_reg_761));
    tmp9_fu_591_p2 <= std_logic_vector(unsigned(kbuf_2_0_load_6_reg_698) + unsigned(tmp3_fu_585_p2));
    tmp_11_1_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_0_1_fu_118),9));
    tmp_11_2_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lbuf_0_q0),9));
    tmp_11_3_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_1_0_load_5_reg_688),9));
    tmp_11_5_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lbuf_1_q0),9));
    tmp_11_6_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_2_0_load_6_reg_698),12));
    tmp_11_7_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_2_1_fu_110),10));
    tmp_11_8_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter0_kbuf_2_2_1_reg_271),9));
    tmp_11_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_0_0_load_reg_678),9));
    tmp_1_7_fu_356_p3 <= ap_phi_mux_i_phi_fu_264_p4(18 downto 18);
        tmp_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_387_p2),64));

    tmp_2_fu_520_p1 <= result_1_4_fu_514_p2(8 - 1 downto 0);
    tmp_3_fu_364_p2 <= "1" when (unsigned(ap_phi_mux_i_phi_fu_264_p4) > unsigned(ap_const_lv19_200)) else "0";
    tmp_4_fu_610_p2 <= (tmp_7_fu_572_p3 or icmp_fu_566_p2);
    tmp_5_fu_556_p4 <= result_1_8_fu_550_p2(11 downto 8);
        tmp_6_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_350_p2),64));

        tmp_6_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(start_pos_reg_236),64));

    tmp_7_fu_572_p3 <= result_1_8_fu_550_p2(11 downto 11);
    tmp_9_fu_596_p2 <= std_logic_vector(unsigned(tmp8_fu_580_p2) + unsigned(tmp9_fu_591_p2));
    tmp_V_fu_616_p3 <= 
        phitmp_fu_602_p3 when (tmp_4_fu_610_p2(0) = '1') else 
        tmp_9_fu_596_p2;
    tmp_last_V_fu_370_p2 <= "1" when (ap_phi_mux_i_phi_fu_264_p4 = ap_const_lv19_40200) else "0";
        tmp_s_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(end_pos_reg_248),64));

end behav;
